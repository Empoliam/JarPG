private void drawRivers()
	{

		for(int g = 0; g < RIVER_COUNT; g ++)
		{

			Dice Coord = new Dice(0,WORLD_SIZE-1);

			int setx = Coord.Roll();
			int sety = Coord.Roll();

			while(!regions[setx][sety].getSolid() && regions[setx][sety].getPolar() && regions[setx][sety].getBeach())
			{

				setx = Coord.Roll();
				sety = Coord.Roll();
				System.out.println(setx + "," + sety);

			}

			regions[setx][sety].setRiver(true);
			boolean outBounds = false;

			while(!regions[setx][sety].getOcean() && !outBounds)
			{

				Dice direction = new Dice(1,8);
				int dir = direction.Roll();


				switch(dir)
				{

				case 1 : 
					setx = setx + 1;
					sety = sety - 1;
					try{ regions[setx][sety].setRiver(true); }
					catch(Exception e){outBounds = true;}
					break;
				case 2 : 
					setx = setx + 1;
					try{ regions[setx][sety].setRiver(true); }
					catch(Exception e){outBounds = true;}
					break;				
				case 3 : 
					setx = setx + 1;
					sety = sety + 1;
					try{ regions[setx][sety].setRiver(true); }
					catch(Exception e){outBounds = true;}
					break;
				case 4 : 
					sety = sety - 1;
					try{regions[setx][sety].setRiver(true);}
					catch(Exception e){outBounds = true;}
					break;
				case 5 : 
					sety = sety + 1;
					try{regions[setx][sety].setRiver(true);}
					catch(Exception e){outBounds = true;}
					break;
				case 6 : 
					setx = setx - 1;
					sety = sety - 1;
					try{regions[setx][sety].setRiver(true);}
					catch(Exception e){outBounds = true;}
					break;
				case 7 : 
					setx = setx - 1;
					try{regions[setx][sety].setRiver(true);}
					catch(Exception e){outBounds = true;}
					break;
				case 8 : 
					setx = setx - 1;
					sety = sety + 1;
					try{regions[setx][sety].setRiver(true);}
					catch(Exception e){outBounds = true;}
					break;

				}

			}

		}

	}